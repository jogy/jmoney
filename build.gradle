buildscript {
    ext {
        kotlinVersion = '1.1.4-3'
        springBootVersion = '1.5.8.RELEASE'
        powerMockVersion = '1.6.6'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-noarg:$kotlinVersion")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath 'se.transmode.gradle:gradle-docker:1.2'
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'kotlin-jpa'
apply plugin: 'org.springframework.boot'
apply plugin: 'jacoco'
apply plugin: 'docker'

sourceCompatibility = 1.8
targetCompatibility = 1.8
group = 'jogy'

allprojects {
    String buildNumber = System.env.TRAVIS_BUILD_NUMBER
    if (buildNumber) {
        project.version = '0.2.' + buildNumber
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

repositories {
    mavenCentral()
}

test {
    testLogging {
        events "passed", "skipped", "failed"

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

dependencies {
    compile("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}")
    compile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-data-rest') {
        exclude module: "spring-boot-starter-tomcat"
    }
    compile("org.springframework.boot:spring-boot-starter-jetty")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("com.fasterxml.jackson.datatype:jackson-datatype-hibernate5")
    compile("com.fasterxml.jackson.module:jackson-module-kotlin")
    compile("org.apache.commons:commons-lang3:3.4")
    compile project("legacy")
    runtime('com.h2database:h2')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile("org.powermock:powermock-module-junit4:${powerMockVersion}")
    testCompile("org.powermock:powermock-api-mockito:${powerMockVersion}")
}

build.dependsOn('legacy:build')

task buildFE(type: Copy, dependsOn: 'front-end:build') {
    description 'Builds the front-end.'
    from 'front-end/dist/prod'
    into 'build/resources/main/static'
}
processResources.dependsOn buildFE
build.dependsOn jacocoTestReport

task buildDocker(type: Docker, dependsOn: build) {
    push = true
    applicationName = jar.baseName
    baseImage "frolvlad/alpine-oraclejdk8:slim"
    volume '/tmp'
    addFile {
        from jar
        rename { 'app.jar' }
    }
    runCommand 'sh -c "touch /app.jar"'
    entryPoint(["sh", "-c", 'java -jar /app.jar'])
}

task buildTravis(dependsOn: buildDocker) {
    description 'Build/test task for Travis, see .travis.yml'
}
